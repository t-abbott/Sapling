{
open FSharp.Text.Lexing
open Parser

let lexeme lexbuf = LexBuffer<_>.LexemeString lexbuf
}

let whitespace = [' ' '\t' '\n']

let symbol = ['+' '-' '/' '*' '_' '?' '<' '>']

let digit = ['0' - '9']
let real = '-'? digit+ ('.' digit+)?

let letter = ['a'-'z' 'A'-'Z']
let ident = letter (letter | digit | symbol)*

rule tokenize = parse
| whitespace            { tokenize lexbuf }
| real                  { lexeme lexbuf |> System.Double.Parse |> NUMBER }
| "true"                { TRUE }
| "false"               { FALSE }
| "()"                  { UNIT }
| '('                   { LPAREN }
| ')'                   { RPAREN }
| "let"                 { LET }
| "in"                  { IN }
| '='                   { EQUALS }
| "if"                  { IF }
| "then"                { THEN }
| "else"                { ELSE } 
| "fun"                 { FUN }
| "->"                  { ARROW }
| symbol+               { lexeme lexbuf |> OP }
| ident                 { lexeme lexbuf |> IDENT } 
| eof                   { EOF }
| _                     { lexeme lexbuf |> sprintf "parser error: %s" |> failwith }
